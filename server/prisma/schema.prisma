// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Definición de la tabla User para gestionar el registro de usuarios
model User {
  id            String       @id @default(uuid())  // Campo ID autoincremental
  username      String                    // Nombre de usuario, máximo 10 caracteres
  email         String    @unique                        // Email único
  fullName      String?    @db.VarChar(100)               // Nombre completo, máximo 100 caracteres
  language      String    @default("Español")            // Idioma con valor predeterminado en español
  gender        String?   @default("Otro")               // Género con valor predeterminado en Otro
  bio           String?   @db.VarChar(180)               // Biografía con un máximo de 180 caracteres
  profilePicUrl String?   @db.Text                       // URL de la foto de perfil
  createdAt     DateTime  @default(now())                // Fecha de creación
  updatedAt     DateTime  @updatedAt                     // Fecha de actualización automática
  library       Library[]                               // Relación con la tabla Library (1-n)
  likes         Like[]                                  // Relación con la tabla Like (1-n)
  feedbacks     Feedback[]                              // Relación con los comentarios y calificaciones (1-n)
  isPrivate     Boolean      @default(false)
}

model Audiobook {
  id             Int         @id @default(autoincrement()) 
  title          String      @db.Char(35) @unique
  categoryId     Int
  category       Category    @relation(fields: [categoryId], references: [id])
  description    String?     @db.Text
  author         String      @db.Char(35)
  duration       String      @db.VarChar(10)
  pdfUrl         String?     @db.Text @unique
  coverUrl       String?     @db.Text @unique
  audioUrl       String?     @db.Text @unique
  text           String?     @db.Text @unique
  averageRating  Float?      @default(0) // Campo para almacenar el promedio de calificaciones
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  library        Library[]
  feedbacks      Feedback[]
}


// Nueva tabla para gestionar comentarios, calificaciones y likes de otros usuarios
model Feedback {
  id          Int       @id @default(autoincrement()) // ID autoincremental
  userId      String                                      // Relación con la tabla User
  audiobookId Int                                         // Relación con la tabla Audiobook
  comment     String?   @db.Text                         // Comentario opcional
  rating      Int       @default(0)                      // Calificación
  likes       Int       @default(0)                      // Contador de Likes
  createdAt   DateTime  @default(now())                  // Fecha de creación
  audiobook   Audiobook @relation(fields: [audiobookId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  likesList   Like[]                                     // Relación con la tabla Like

  @@unique([userId, audiobookId]) // Restricción única por usuario y audiolibro
}

model Like {
  id          Int       @id @default(autoincrement())    // ID del like
  userId      String                                      // Relación con la tabla User
  feedbackId  Int                                         // Relación con la tabla Feedback
  createdAt   DateTime  @default(now())                  // Fecha en que se dio el like
  user        User      @relation(fields: [userId], references: [id])
  feedback    Feedback   @relation(fields: [feedbackId], references: [id])

  @@unique([userId, feedbackId]) // Un usuario solo puede dar un like por feedback
}


model Library {
  id           Int       @id @default(autoincrement())
  userId       String
  audiobookId  Int
  audiobook    Audiobook @relation(fields: [audiobookId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  saved        Boolean   @default(false)                // Si el audiolibro ha sido guardado en la biblioteca
  favorite     Boolean   @default(false)                // Si el audiolibro es marcado como favorito
  played       Boolean   @default(false)                // Si el audiolibro ha sido reproducido
  finished     Boolean   @default(false)                // Si el audiolibro ha sido marcado como terminado
  recommended  Boolean   @default(false)                // Si el audiolibro ha sido marcado como recomendado
  updatedAt    DateTime  @updatedAt                     // Fecha de última modificación
  lastPosition Int       @default(0)                    // Última posición de reproducción en segundos
}


model Category {
  id         Int         @id @default(autoincrement())  // Campo ID autoincremental
  name       String      @unique @db.VarChar(100)       // Nombre de la categoría
  audiobooks Audiobook[]                               // Relación con la tabla Audiobook (1-n)
}
